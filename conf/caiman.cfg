# -*- python -*-
# ex: set filetype=python:

from buildbot.plugins import *
from pymongo import MongoClient
from ConfigParser import SafeConfigParser
import os, sys

c = SafeConfigParser()
c.read('user.conf')

USER = c.get('main', 'user')
WEB_LOGIN = c.get('main', 'web_login')
WEB_PASS = c.get('main', 'web_pass')
SLAVE_PASS = c.get('main', 'slave_pass')
SLAVE_AMI = c.get('main', 'slave_ami')

db = MongoClient('localhost', 27017).cerise

factories = {}
userObj = db.User.find_one({"email": USER})
projects = userObj.projects

for project in projects:
    factories[project['name']] = util.BuildFactory()
    for step in project['steps']:
        factories[project['name']].addStep(step)

for factory in factories:
    c['builders'].append(
        BuilderConfig(name=factory, workernames=['build-slave'], factory=factories[factory])

# This is a sample buildmaster config file. It must be installed as
# 'master.cfg' in your buildmaster's base directory.

# This is the dictionary that the buildmaster pays attention to. We also use
# a shorter alias to save typing.
c = BuildmasterConfig = {}

####### WORKERS

# The 'workers' list defines the set of recognized workers. Each element is
# a Worker object, specifying a unique worker name and password.  The same
# worker name and password must be configured on the worker.
c['workers'] = [worker.EC2LatentWorker("build-slave", SLAVE_PASS, "c4.large", ami=SLAVE_AMI, region='us-west-2', security_name="sg-76e0a910")]

# 'protocols' contains information about protocols which master will use for
# communicating with workers. You must define at least 'port' option that workers
# could connect to your master with this protocol.
# 'port' must match the value configured into the workers (with their
# --master option)
c['protocols'] = {'pb': {'port': 9989}}

####### CHANGESOURCES

# the 'change_source' setting tells the buildmaster how it should find out
# about source code changes.  Here we point to the buildbot clone of pyflakes.

c['change_source'] = []
c['change_source'].append(changes.GitPoller(
        'https://xassembly-worker:' + GIT_TOKEN + '@github.com/exactassembly/caiman.git',
        workdir='/caiman', branch='newarch',
        pollinterval=300))

####### SCHEDULERS

# Configure the Schedulers, which decide how to react to incoming changes.  In this
# case, just kick off a 'runtests' build

c['schedulers'] = []
c['schedulers'].append(schedulers.SingleBranchScheduler(
                            name="all",
                            change_filter=util.ChangeFilter(branch='newarch'),
                            treeStableTimer=None,
                            builderNames=["builder"]))
c['schedulers'].append(schedulers.ForceScheduler(
                            name="force",
                            builderNames=["builder"]))

####### BUILDERS

# The 'builders' list defines the Builders, which tell Buildbot how to perform a build:
# what steps, and which workers can execute them.  Note that any particular build will
# only take place on one worker.

factory = util.BuildFactory()
factory.addStep(steps.Git(repourl='https://xassembly-worker:' + GIT_TOKEN + '@github.com/exactassembly/caiman.git', 
                            branch='newarch', mode='incremental', workdir="/caiman"))
factory.addStep(steps.ShellCommand(command=["bundle", "install"], workdir="/caiman/gatoregg"))
factory.addStep(steps.ShellCommand(command=["rake"], workdir="/caiman/gatoregg"))
factory.addStep(steps.ShellCommand(command=["rake"]))    

c['builders'] = [
                util.BuilderConfig(name="builder", workernames=["build-slave"], factory=factory)]

####### STATUS TARGETS

# 'status' is a list of Status Targets. The results of each build will be
# pushed to these targets. buildbot/status/*.py has a variety to choose from,
# like IRC bots.

c['status'] = []


# the 'buildbotURL' string should point to the location where the buildbot's
# internal web server is visible. This typically uses the port number set in 
# the 'www' entry below, but with an externally-visible host name which the 
# buildbot cannot figure out without some help.

c['buildbotURL'] = "http://localhost:8010/"

# minimalistic config to activate new web UI
c['www'] = dict(port=8010,
                plugins=dict(waterfall_view={}, console_view={}))

####### DB URL

c['db'] = {
    # This specifies what database buildbot uses to store its state.  You can leave
    # this at its default for all but the largest installations.
    'db_url' : "sqlite:///state.sqlite",
}
